// Code generated by mockery v2.53.5. DO NOT EDIT.

package router_mock

import (
	context "context"
	auth "harmony/internal/auth"

	domain "harmony/internal/auth/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockEmailValidator is an autogenerated mock type for the EmailValidator type
type MockEmailValidator struct {
	mock.Mock
}

type MockEmailValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailValidator) EXPECT() *MockEmailValidator_Expecter {
	return &MockEmailValidator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: ctx, input
func (_m *MockEmailValidator) Validate(ctx context.Context, input auth.ValidateEmailInput) (domain.AuthenticatedAccount, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 domain.AuthenticatedAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.ValidateEmailInput) (domain.AuthenticatedAccount, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.ValidateEmailInput) domain.AuthenticatedAccount); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(domain.AuthenticatedAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.ValidateEmailInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEmailValidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockEmailValidator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - input auth.ValidateEmailInput
func (_e *MockEmailValidator_Expecter) Validate(ctx interface{}, input interface{}) *MockEmailValidator_Validate_Call {
	return &MockEmailValidator_Validate_Call{Call: _e.mock.On("Validate", ctx, input)}
}

func (_c *MockEmailValidator_Validate_Call) Run(run func(ctx context.Context, input auth.ValidateEmailInput)) *MockEmailValidator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auth.ValidateEmailInput))
	})
	return _c
}

func (_c *MockEmailValidator_Validate_Call) Return(_a0 domain.AuthenticatedAccount, _a1 error) *MockEmailValidator_Validate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEmailValidator_Validate_Call) RunAndReturn(run func(context.Context, auth.ValidateEmailInput) (domain.AuthenticatedAccount, error)) *MockEmailValidator_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmailValidator creates a new instance of MockEmailValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailValidator {
	mock := &MockEmailValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
